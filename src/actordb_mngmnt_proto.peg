sql <- account_management_query ~;

% ---------------- Account Management Statements

account_management_query <- insert_user  / grant_sql / drop_user / rename_sql / revoke_sql / set_password ~;
%
drop_user <- space? drop space user space user_at_host space? `
    #management{action = drop, data = lists:nth(4,Node) }
`;

insert_user <- space? create_user space user_at_host space identified password? space param space? `
    #value{name = undefined,value = Password} = lists:nth(9, Node),
    #management{action = create, data = #account{access = [#value{name = <<"password">>, value = Password}|lists:nth(4, Node)]}}
`;

grant_sql <- space? grant space permission space? on space priv_level ('.' priv_level space / space) to space user_at_host space? (with grant_options*)? space?`
    case lists:nth(14,Node) of
    [_|_] ->
      #management{action = grant, data = #permission{on = lists:nth(8,Node), account = lists:nth(12,Node), conditions = [lists:nth(4,Node)|lists:nth(2,lists:nth(14,Node))]}};
    _ ->
      #management{action = grant, data = #permission{on = lists:nth(8,Node), account = lists:nth(12,Node), conditions = lists:nth(4,Node)}}
    end
`;

rename_sql <- space? rename_user space user_at_host space to space user_at_host space? `
    #management{action = rename, data = [#account{access = lists:nth(4, Node)}|lists:nth(8, Node)]}
`;

revoke_sql <- space? revoke space permission space on space priv_level ('.' priv_level space / space) from space user_at_host space? `
    #management{action = revoke, data = #permission{on = lists:nth(8,Node), account = lists:nth(12,Node), conditions = lists:nth(4,Node)}}
`;

set_password <- space? set space password space for space user_at_host space '=' space param space? `
    case lists:nth(12, Node) of
      #value{name = undefined,value = Password} -> ok;
      #key{name = Password, alias = _} -> ok
    end,
    #management{action = setpasswd, data = #account{access =[#value{name = <<"password">>, value = Password}|lists:nth(8, Node)]}}
`;

% ---------------- COMMON TYPES




table <- table_alias / table_value ~;
table_alias <- key space as space key `
    #table{name=lists:nth(1, Node), alias=lists:nth(5, Node)}
`;
table_value <- key `
    #table{name=Node, alias=Node}
`;


param <- param_value / param_all / param_all_alias / param_key_alias / param_key ~;

param_key_alias <- key '\.' key (space as space key)? `
    case Node of
        [Alias, _, Val, [_, _As, _, Key]] -> #key{alias=Key, name=Val, table=Alias};
        [Alias, _, Val, []] -> #key{alias=Val, name=Val, table=Alias}
    end
`;
param_key <- key (space as space key)? `
    case Node of
        [Val, [_, _As, _, Key]] -> #key{alias=Key, name=Val};
        [Val, []] -> #key{alias=Val, name=Val}
    end
`;
param_value <- value (space as space key)? `
    case Node of
        [Val, [_, _As, _, Key]] -> #value{name=Key, value=Val};
        [Val, []] -> #value{value=Val}
    end
`;

param_all <- '*' `#all{}`;
param_all_alias <- key '\.' '*' `#all{table=lists:nth(1,Node)}`;


% --------------- GRANT Syntax priv_type https://dev.mysql.com/doc/refman/5.0/en/grant.html
priv_level <- priv_part / priv_all / all_for_all / db_name_all / db_name_table / table ~;

priv_part <- '.' '*' `
  #all{}
`;

priv_all <- '*' `
  #all{}
`;

all_for_all <- '*' '.' '*' `
  #all{table = #all{}}
`;

db_name_all <- database '.' '*' `
    [DBName,_,_] = Node,
    #value{name = DBName, value = #all{}}
`;

db_name_table <- database '.' table `
    [DBName,_,TableName] = Node,
    %table could also be routine name
    #value{name = DBName, value = #table{name = TableName}}
`;

% --------------- Permissions
permission <- head:perms tail:( space? ',' space? perms )* `
  [proplists:get_value(head, Node)|[ lists:nth(4,I) || I <- proplists:get_value(tail, Node) ]]
`;

perms <- all / all_privileges / alter_routine / alter  / create_routine / create_temp_tables / create_user / create_view /
event / file / grant_option / index / lock_tables / process / references / reload / repl_client / repl_slave /
show_dbs / show_view / shutdown / super / trigger / update / usage / insert / create / delete / drop / execute / select / update / read / write ~;

% --------------- GRANT Syntax Account Names http://dev.mysql.com/doc/refman/5.6/en/account-names.html

user_at_host <- param '@' param `
    [{value,undefined,Username},<<"@">>,{value,undefined,Host}] = Node,
    [#value{name = <<"username">>, value = Username},
    #value{name = <<"host">>, value = Host}]
`;

% --------------- GRANT Options syntax

grant_options <- space? (max_queries_per_hour / max_updates_per_hour / max_connections_per_hour / max_user_connections) space? ('=' space? integer / integer) `
  case Node of
  [_,What,_,[_Operator,_,Value]] -> #value{name = What, value = Value};
  [_,What,_,Value] -> #value{name = What, value = Value}
  end
`;



% ------------- reserved words

update <- #(?i)update# `update`;
execute <- #(?i)execute# `execute`;
create <- #(?i)create# `create`;
select <- #(?i)select# `select`;
set <- #(?i)set# `set`;
from <- #(?i)from# `from`;
as <- #(?i)as# `as`;
all <- #(?i)all# `all`;
all_privileges <- #(?i)all +privileges# `all_privileges`;
delete <- #(?i)delete# `delete`;
insert <- #(?i)insert# `insert`;
create_user <- #(?i)create +user# `create_user`;
create_view <- #(?i)create +view# `create_view`;
rename_user <- #(?i)rename +user# `rename_user`;
identified <- #(?i)identified +by # `identified`;
password <- #(?i)password# `password`;
grant <- #(?i)grant# `grant`;
usage <- #(?i)usage# `usage`;
on <- #(?i)on# `on`;
to <- #(?i)to# `to`;
user <- #(?i)user# `user`;
drop <- #(?i)drop# `drop`;
with <- #(?i)with# `with`;
database <- key ~;
revoke <- #(?i)revoke# `revoke`;
for <- #(?i)for# `for`;
max_queries_per_hour <- #(?i)max_queries_per_hour# `max_queries_per_hour`;
max_updates_per_hour <- #(?i)max_updates_per_hour# `max_updates_per_hour`;
max_connections_per_hour <- #(?i)max_connections_per_hour# `max_connections_per_hour`;
max_user_connections <- #(?i)max_user_connections# `max_user_connections`;
alter <- #(?i)alter# `alter`;
alter_routine <- #(?i)alter +routine# `alter_routine`;
create_routine <- #(?i)create +routine# `create_routine`;
create_temp_tables <- #(?i)create +temporary +tables# `create_temp_tables`;
event <- #(?i)event# `event`;
file <- #(?i)file# `file`;
grant_option <- #(?i)grant +option# `grant_option`;
index <- #(?i)index# `index`;
lock_tables <- #(?i)lock +tables# `lock_tables`;
references <- #(?i)references# `references`;
reload <- #(?i)reload# `reload`;
repl_client <- #(?i)replication +client# `repl_client`;
repl_slave <- #(?i)replication +slave# `repl_slave`;
show_dbs <- #(?i)show +databases# `show_dbs`;
show_view <- #(?i)show +view# `show_view`;
shutdown <- #(?i)shutdown# `shutdown`;
super <- #(?i)super# `super`;
trigger <- #(?i)trigger# `trigger`;
process <- #(?i)process# `process`;
read <- #(?i)read# `read`;
write <- #(?i)write# `write`;

% complex types

key <- '`' chars:(!'`' ("\\\\" / '\\`' / .))+ '`' / [a-zA-Z] [A-zA-Z0-9_]* `
    case length(Node) of
        3 -> iolist_to_binary(proplists:get_value(chars, Node));
        2 -> iolist_to_binary([lists:nth(1,Node)|lists:nth(2,Node)])
    end
`;
value <- string / null / number ~;

% Basic types

string <- "'" ((!"'" ("\\\\" / "\\'" / .)) ("''")?)* "'" `binary:replace(iolist_to_binary(lists:nth(2, Node)), <<"''">>, <<"'">>)`;
number <- float / integer ~;
integer <- [0-9]+ `
    list_to_integer(lists:flatten([ binary_to_list(I) || I <- Node ]))
`;
float <- [0-9]* '.' [0-9]+ `
    case Node of
        [Int,_,Dec] when Int =/= [] ->
            list_to_float(
                lists:flatten([ binary_to_list(I) || I <- Int ]) ++ "." ++
                lists:flatten([ binary_to_list(D) || D <- Dec ])
            );
        [_,_,[Dec]] ->
            list_to_float("0." ++ lists:flatten([ binary_to_list(D) || D <- Dec ]))
    end
`;
space <- [ \t\n\s\r]* ~;
null <- [nN] [uU] [lL] [lL] `null`;

`
-include("actordb.hrl").
`
